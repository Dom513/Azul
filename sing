import pygame
import random
import math
import copy
from globals import Pot, Tile, Gameboard, Factory, calculate_tile_score, move, get_dragged_tiles, able_to_be_placed

def get_state(player, game_boards, factories, pot):
    copy_game_boards = [Gameboard(game_board.player, game_board.top_left, towers=game_board.towers,
                            tiles=game_board.tiles, player_pos=game_board.player_pos, 
                            score=game_board.score) for game_board in game_boards]
    copy_factories = [Factory(factory.center, factory.tiles) for factory in factories]
    copy_pot = Pot(pot.center, pot.tiles)
    state = {"Current_Player": player,
            "Gameboards": copy_game_boards,
            "Factories": copy_factories,
            "Pot": copy_pot}
    for i in range(len(game_boards)):
        state[f"Player {i} Towers"] = copy_game_boards[i].towers
        state[f"Player {i} Gameboard"] = copy_game_boards[i]
    return state

class Node:
    def __init__(self, state, player, parent=None, move=None):
        self.player = player
        self.state = state
        self.move = move
        self.parent = parent  # Parent node
        self.children = []  # Child nodes
        self.visits = 0  # Number of times the node has been visited
        self.wins = 0  # Number of wins for this node

    def is_fully_expanded(self):
        return len(self.children) == len(self.get_legal_moves())
    
    def get_legal_moves(self):
        legal_moves = []
        legal_factories = [factory for factory in self.state["Factories"]+[self.state["Pot"]] if (factory.tiles != [] and factory.tiles != ["o"])]
        for factory_num, factory in enumerate(legal_factories):
            legal_colours = list(ti.colour for ti in factory.tiles)
            for colour in legal_colours:
                if colour != 'o':
                    tiles = [ti for ti in factory.tiles if ti.colour == colour]
                    for tower in self.state["Towers"]:
                        legal_moves.append((factory_num, factory, tiles, tower, self.state[f"Player {self.player} Gameboard"]))
        allowed_moves = []
        for (factory_num, factory, tiles, tower, game_board) in legal_moves:
            if (tower.category != 0 and able_to_be_placed(tower, game_board, tiles)) or tower.category == 0:
                allowed_moves.append((factory_num, factory, tiles, tower, game_board))
        return allowed_moves
    
    def make_move(self, move, game_info):
        factory_num, factory, tiles, tower, game_board = move
        player = game_board.player-1
        pot = self.state["Pot"]
        game_boards = self.state["Gameboards"]
        factories = self.state["Factories"]
        spaces_to_minus = 7 - len(game_board.towers[0].tiles)
        if tower.category != 0:  # if not a minus tower
            tiles_to_tower, _, _, tiles_to_minus = tower.add_tiles(tiles) 
            tiles_to_minus, _, _, tiles_remaining = game_board.towers[0].add_tiles(tiles_to_minus, factory, pot, spaces_to_minus)
            # Add tiles to relevant towers and remove from factory
            for tile in tiles_to_tower+tiles_to_minus+tiles_remaining:
                factory.tiles.remove(tile)
        else:  # if a minus tower, add regardless of colour
            tiles_to_minus, _, _, tiles_remaining = tower.add_tiles(tiles, factory, pot, spaces_to_minus)
            tiles_to_tower = []
            # Add tiles to relevant towers and remove from factory
            #print([ti.colour for ti in factory.tiles])
            for tile in tiles_to_minus+tiles_remaining:
                factory.tiles.remove(tile)
        if isinstance(factory, Pot):  # if taking from the pot
            tiles_to_pot = pot.tiles
        else:      # if taking normally
            tiles_to_pot = factory.tiles
            pot.tiles += factory.tiles
            factory.tiles = []
        if "o" in [tile.colour for tile in pot.tiles] and isinstance(factory, Pot):
            one = tiles_to_pot[0]
            tiles_to_pot = tiles_to_pot[1:]
            tiles_to_minus = [one] + tiles_to_minus
            game_info["next_first_player"] = game_board.player
            pot.tiles.remove(one)
            game_board.towers[0].tiles.append(one)
        else:
            one = "placeholder"
        tiles = []
        game_info["offsets"] = []
        state = get_state(player, game_boards, factories, pot)
        #print_move_and_state(move, state, factories)
        return state      

    def get_reward(self):
        game_boards = self.state["Gameboards"]
        total_new_score = [0]*len(game_boards)
        for i, game_board in enumerate(game_boards):
            for tower in game_board.towers[1:]:
                if tower.category == len(tower.tiles):
                    row = tower.category-1
                    col = game_board.coord_cols[row].index(tower.tiles[0].colour)
                    game_board_tiles_before = [[t.colour if isinstance(t, Tile) else "-" for t in row] for row in game_board.tiles]
                    game_board.tiles[row][col] = tower.tiles[0]
                    game_board_tiles_after = [[t.colour if isinstance(t, Tile) else "-" for t in row] for row in game_board.tiles]
                    score = calculate_tile_score(game_board_tiles_before, game_board_tiles_after, tower.tiles[0].colour, (row,col))
                    tower_score = tower.category / 5
                    total_new_score[i] += score + tower_score
            for tile in game_board.towers[0].tiles:
                minus_scores = [-1,-1,-2,-2,-2,-3,-3]
                score = minus_scores[game_board.towers[0].tiles.index(tile)]
                total_new_score[i] += score
            #print(total_new_score)
        return total_new_score
  
